Tue Jun 27 03:30:21 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Please input 9 digits to be randomly shuffled: 
The first shuffled output is: 
+-------+
| 1 2 3 |
| 5 6 4 |
| 9 8 7 |
+-------+
The second shuffled output is: 
+-------+
| 3 9 2 |
| 6 1 7 |
| 5 8 4 |
+-------+
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
61396 warnings generated.
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:44:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int iterator = 0; iterator < stringOfDigits.length(); iterator++) {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:57:22: error: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays,-warnings-as-errors]
bool isInteger(const char array[]) {
                     ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:58:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  int size = strlen(array);
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:58:14: error: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions,-warnings-as-errors]
  int size = strlen(array);
             ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:59:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 0; i < size; i++) {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:59:19: error: backward branch (for loop) is ID-dependent due to variable reference to 'size' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (int i = 0; i < size; i++) {
                  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:60:10: error: implicit conversion 'int' -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
    if (!isdigit(array[i])) {
        ~^
                           == 0
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:76:26: error: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c,-warnings-as-errors]
  int numberOfShuffles = atoi(argValue[1]);
                         ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:86:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  do {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:76:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  int numberOfShuffles = atoi(argValue[1]);
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:100:3: error: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays,-warnings-as-errors]
  string loopNames[] = {"first", "second",  "third",  "fourth", "fifth",
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:102:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int i = 0; i < numberOfShuffles; i++) {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:102:19: error: backward branch (for loop) is ID-dependent due to variable reference to 'numberOfShuffles' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  for (int i = 0; i < numberOfShuffles; i++) {
                  ^
Suppressed 61380 warnings (61380 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
11 warnings treated as errors
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./main.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==10427== Memcheck, a memory error detector
==10427== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==10427== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==10427== Command: ./a.out 2
==10427== Parent PID: 9969
==10427== 
==10427== 
==10427== HEAP SUMMARY:
==10427==     in use at exit: 0 bytes in 0 blocks
==10427==   total heap usage: 3 allocs, 3 frees, 77,824 bytes allocated
==10427== 
==10427== All heap blocks were freed -- no leaks are possible
==10427== 
==10427== For lists of detected and suppressed errors, rerun with: -s
==10427== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
Invalid command line argument.
File '/home/cssuwbstudent/css343-wkluck/HW1/main.cpp':
Name                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allDigits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                               1       1   0.00%         4       4   0.00%         0       0   0.00%
shuffleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                  1       1   0.00%        12      12   0.00%         0       0   0.00%
print3x3(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                      10      10   0.00%        13      13   0.00%         6       6   0.00%
isInteger(char const*)                                                                                                                          7       7   0.00%         9       9   0.00%         4       4   0.00%
main                                                                                                                                           18      14  22.22%        33      28  15.15%        14      13   7.14%
main.cpp:allDigits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_0::operator()(char) const         3       3   0.00%         1       1   0.00%         4       4   0.00%
main.cpp:shuffleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::$_1::operator()(char&) const           1       1   0.00%         6       6   0.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                          41      37   9.76%        78      73   6.41%        28      27   3.57%
    1|       |#include <algorithm>
    2|       |#include <cstring>
    3|       |#include <iostream>
    4|       |#include <random>
    5|       |
    6|       |using namespace std;
    7|       |
    8|       |// checks if all characters are digits
    9|      0|bool allDigits(const string &stringOfDigits) {
   10|      0|  return all_of(stringOfDigits.begin(), stringOfDigits.end(),
   11|      0|                [](char digit) { return (digit >= '0' && digit <= '9'); });
   12|      0|}
   13|       |
   14|       |// shuffles the string and returns the result
   15|      0|string shuffleString(string stringOfDigits) {
   16|      0|  auto length = stringOfDigits.length();
   17|       |
   18|       |  // creates the random number generator
   19|      0|  random_device randomDevice;
   20|      0|  mt19937 randomNumberGenerator(randomDevice());
   21|       |
   22|       |  // swaps based on random number
   23|      0|  all_of(stringOfDigits.begin(), stringOfDigits.end(), [&](char &current) {
   24|      0|    uniform_int_distribution<int> dist(0, static_cast<int>(length) - 1);
   25|      0|    int randomNumber = dist(randomNumberGenerator);
   26|       |
   27|      0|    swap(current, stringOfDigits[randomNumber]);
   28|       |
   29|      0|    return true;
   30|      0|  });
   31|       |
   32|      0|  return stringOfDigits;
   33|      0|}
   34|       |
   35|       |// prints stringOfDigits in a 3x3 grid
   36|       |/*  +-------+
   37|       |    | # # # |
   38|       |    | # # # |
   39|       |    | # # # |
   40|       |    +-------+
   41|       |*/
   42|      0|void print3x3(string stringOfDigits) {
   43|      0|  cout << "+-------+" << endl;
   44|      0|  for (int iterator = 0; iterator < stringOfDigits.length(); iterator++) {
   45|      0|    if (iterator % 3 == 0) {
   46|      0|      cout << "| " << stringOfDigits[iterator];
   47|      0|    } else if (iterator % 3 == 1) {
   48|      0|      cout << " " << stringOfDigits[iterator];
   49|      0|    } else {
   50|      0|      cout << " " << stringOfDigits[iterator] << " |" << endl;
   51|      0|    }
   52|      0|  }
   53|      0|  cout << "+-------+" << endl;
   54|      0|}
   55|       |
   56|       |// checks if the array has only integers (use for command line arguments)
   57|      0|bool isInteger(const char array[]) {
   58|      0|  int size = strlen(array);
   59|      0|  for (int i = 0; i < size; i++) {
   60|      0|    if (!isdigit(array[i])) {
   61|      0|      return false;
   62|      0|    }
   63|      0|  }
   64|      0|  return true;
   65|      0|}
   66|       |
   67|      1|int main(int argCount, char *argValue[]) {
   68|       |
   69|       |  // checks if there is a command line argument && it is a digit
   70|      1|  if (argCount != 2 || !isInteger(argValue[1])) {
   71|      1|    cerr << "Invalid command line argument." << endl;
   72|      1|    return 1;
   73|      1|  }
   74|       |
   75|       |  // converts command line argument into a integer
   76|      0|  int numberOfShuffles = atoi(argValue[1]);
   77|       |
   78|       |  // checks that command line argument is a single digit
   79|      0|  if (numberOfShuffles >= 10) {
   80|      0|    cerr << "Invalid number. Please enter a number less than 10" << endl;
   81|      0|    return 1;
   82|      0|  }
   83|       |
   84|       |  // gathers input, loops if input not accepted
   85|      0|  string input;
   86|      0|  do {
   87|      0|    if (input.length() > 0) { // this happens if this do-while loops
   88|      0|      cout << "Invalid number. ";
   89|      0|    }
   90|      0|    cout << "Please input 9 digits to be randomly shuffled: ";
   91|      0|    cin >> input;
   92|      0|    cout << endl;
   93|      0|    if (!allDigits(input)) { // makes sure all inputed values are digits
   94|      0|      input = "0";           // if not all digits ensures the loop repeats
   95|      0|    }
   96|      0|  } while (input.length() != 9);
   97|       |
   98|       |  // preserves input, shuffles, and prints each shuffle
   99|      0|  string next = input;
  100|      0|  string loopNames[] = {"first", "second",  "third",  "fourth", "fifth",
  101|      0|                        "sixth", "seventh", "eighth", "ninth"};
  102|      0|  for (int i = 0; i < numberOfShuffles; i++) {
  103|      0|    cout << "The " << loopNames[i] << " shuffled output is: " << endl;
  104|      0|    next = shuffleString(next);
  105|      0|    print3x3(next);
  106|      0|  }
  107|       |
  108|      0|  cout << "Done." << endl;
  109|       |
  110|      0|  return 0;
  111|      0|};

Tue Jun 27 03:30:49 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
