Fri Jun 23 04:42:07 UTC 2023
Linux LinuxMachine 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1000(cssuwbstudent) gid=1000(cssuwbstudent) groups=1000(cssuwbstudent),10(wheel)
=====================================================
1. Compilation warnings are in the section below
=====================================================
=====================================================
2. Program output are in the section below
=====================================================
Please input 9 digits to be randomly shuffled: 
+-------+
| 4 8 2 |
| 5 6 7 |
| 3 9 1 |
+-------+
+-------+
| 7 5 8 |
| 9 6 4 |
| 3 1 2 |
+-------+
Done.
=====================================================
3. clang-tidy warnings are in the section below
=====================================================
60682 warnings generated.
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:23:43: error: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions,-warnings-as-errors]
    uniform_int_distribution<int> dist(0, length - 1);
                                          ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:43:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  for (int iterator = 0; iterator < stringOfDigits.length(); iterator++) {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:64:8: error: implicit conversion 'int' -> bool [readability-implicit-bool-conversion,-warnings-as-errors]
  if (isdigit(argValue[1][0]) == 0) {
      ~^
                                 == 0
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:70:26: error: 'atoi' used to convert a string to an integer value, but function will not report conversion errors; consider using 'strtol' instead [cert-err34-c,-warnings-as-errors]
  int numberOfShuffles = atoi(argValue[1]);
                         ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:80:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  do {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:70:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  int numberOfShuffles = atoi(argValue[1]);
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:94:3: error: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops,-warnings-as-errors]
  while (numberOfShuffles > 0) {
  ^
/home/cssuwbstudent/css343-wkluck/HW1/main.cpp:94:10: error: backward branch (while loop) is ID-dependent due to variable reference to 'numberOfShuffles' and may cause performance degradation [altera-id-dependent-backward-branch,-warnings-as-errors]
  while (numberOfShuffles > 0) {
         ^
Suppressed 60674 warnings (60674 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
7 warnings treated as errors
=====================================================
4. clang-format warnings are in the section below
=====================================================
Running clang-format on ./main.cpp
=====================================================
5. Memory leak issues are in the section below
=====================================================
=====================================================
6. valgrind memory test is in the section below. Look for "definitely lost" 
=====================================================
==16762== Memcheck, a memory error detector
==16762== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==16762== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==16762== Command: ./a.out 2
==16762== Parent PID: 16353
==16762== 
==16762== 
==16762== HEAP SUMMARY:
==16762==     in use at exit: 0 bytes in 0 blocks
==16762==   total heap usage: 3 allocs, 3 frees, 77,824 bytes allocated
==16762== 
==16762== All heap blocks were freed -- no leaks are possible
==16762== 
==16762== For lists of detected and suppressed errors, rerun with: -s
==16762== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Code coverage information is in the section below
=====================================================
Missing command line argument.
File '/home/cssuwbstudent/css343-wkluck/HW1/main.cpp':
Name                                                                                                                                      Regions    Miss   Cover     Lines    Miss   Cover  Branches    Miss   Cover
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
allDigits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)                                               1       1   0.00%         4       4   0.00%         0       0   0.00%
shuffleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                  1       1   0.00%        12      12   0.00%         0       0   0.00%
print3x3(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)                                                      10      10   0.00%        13      13   0.00%         6       6   0.00%
main                                                                                                                                           18      15  16.67%        35      30  14.29%        14      13   7.14%
main.cpp:allDigits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)::$_0::operator()(char) const         3       3   0.00%         1       1   0.00%         4       4   0.00%
main.cpp:shuffleString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::$_1::operator()(char&) const           1       1   0.00%         6       6   0.00%         0       0   0.00%
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
TOTAL                                                                                                                                          34      31   8.82%        71      66   7.04%        24      23   4.17%
    1|       |#include <algorithm>
    2|       |#include <iostream>
    3|       |#include <random>
    4|       |
    5|       |using namespace std;
    6|       |
    7|       |// checks if all characters are digits
    8|      0|bool allDigits(const string &stringOfDigits) {
    9|      0|  return all_of(stringOfDigits.begin(), stringOfDigits.end(),
   10|      0|                [](char digit) { return (digit >= '0' && digit <= '9'); });
   11|      0|}
   12|       |
   13|       |// shuffles the string and returns the result
   14|      0|string shuffleString(string stringOfDigits) {
   15|      0|  auto length = stringOfDigits.length();
   16|       |
   17|       |  // creates the random number generator
   18|      0|  random_device randomDevice;
   19|      0|  mt19937 randomNumberGenerator(randomDevice());
   20|       |
   21|       |  // swaps based on random number
   22|      0|  all_of(stringOfDigits.begin(), stringOfDigits.end(), [&](char &current) {
   23|      0|    uniform_int_distribution<int> dist(0, length - 1);
   24|      0|    int randomNumber = dist(randomNumberGenerator);
   25|       |
   26|      0|    swap(current, stringOfDigits[randomNumber]);
   27|       |
   28|      0|    return true;
   29|      0|  });
   30|       |
   31|      0|  return stringOfDigits;
   32|      0|}
   33|       |
   34|       |// prints stringOfDigits in a 3x3 grid
   35|       |/*  +-------+
   36|       |    | # # # |
   37|       |    | # # # |
   38|       |    | # # # |
   39|       |    +-------+
   40|       |*/
   41|      0|void print3x3(string stringOfDigits) {
   42|      0|  cout << "+-------+" << endl;
   43|      0|  for (int iterator = 0; iterator < stringOfDigits.length(); iterator++) {
   44|      0|    if (iterator % 3 == 0) {
   45|      0|      cout << "| " << stringOfDigits[iterator];
   46|      0|    } else if (iterator % 3 == 1) {
   47|      0|      cout << " " << stringOfDigits[iterator];
   48|      0|    } else {
   49|      0|      cout << " " << stringOfDigits[iterator] << " |" << endl;
   50|      0|    }
   51|      0|  }
   52|      0|  cout << "+-------+" << endl;
   53|      0|}
   54|       |
   55|      1|int main(int argCount, char *argValue[]) {
   56|       |
   57|       |  // checks if there is a command line argument
   58|      1|  if (argCount < 2) {
   59|      1|    cerr << "Missing command line argument." << endl;
   60|      1|    return 1;
   61|      1|  }
   62|       |
   63|       |  // checks if the command line argument is a number
   64|      0|  if (!(isdigit(argValue[1][0]))) {
   65|      0|    cerr << "Invalid command line argument." << endl;
   66|      0|    return 1;
   67|      0|  }
   68|       |
   69|       |  // converts command line argument into a integer
   70|      0|  int numberOfShuffles = atoi(argValue[1]);
   71|       |
   72|       |  // checks that command line argument is a single digit
   73|      0|  if (numberOfShuffles >= 10) {
   74|      0|    cerr << "Invalid number. Please enter a number less than 10" << endl;
   75|      0|    return 1;
   76|      0|  }
   77|       |
   78|       |  // gathers input, loops if input not accepted
   79|      0|  string input;
   80|      0|  do {
   81|      0|    if (input.length() > 0) { // this happens if this do-while loops
   82|      0|      cout << "Invalid number. ";
   83|      0|    }
   84|      0|    cout << "Please input 9 digits to be randomly shuffled: ";
   85|      0|    cin >> input;
   86|      0|    cout << endl;
   87|      0|    if (!allDigits(input)) { // makes sure all inputed values are digits
   88|      0|      input = "0000000000";  // if not all digits ensures the loop repeats
   89|      0|    }
   90|      0|  } while (input.length() != 9);
   91|       |
   92|       |  // preserves input, shuffles, and prints each shuffle
   93|      0|  string next = input;
   94|      0|  while (numberOfShuffles > 0) {
   95|      0|    next = shuffleString(next);
   96|      0|    print3x3(next);
   97|      0|    numberOfShuffles--;
   98|      0|  }
   99|      0|  cout << "Done." << endl;
  100|       |
  101|      0|  return 0;
  102|      0|};

Fri Jun 23 04:42:37 UTC 2023
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
